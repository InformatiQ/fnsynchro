#!/usr/bin/python

from configobj import ConfigObj
import time
import os, cgi, cgitb
cgitb.enable()

cfg_path = '/etc/fnsynchro'

def get_options():
    options = {}
    configs = os.listdir(cfg_path)
    for config in configs:
        cfg_file = os.path.join(cfg_path, config)
        cfgobj = ConfigObj(cfg_file)
        options[config] = []
        for section in cfgobj.sections:
            if section in ['system', 'general']:
                continue
            else:
                options[config].append(section)
    return options

STYLE="""<STYLE TYPE="text/css">
body
{
    font-family:Verdana;
    margin : 10px 20% 10px 20%;
}
h1{font-size : 100%;
padding : 2px;
background : silver;
border : 1px solid black;
}
#div1{
font-size : 80%;
}
</STYLE>
"""

PAGE_START="Content-Type: text/html"

"""+STYLE+"""
BODY = """<html><head><title>Synchronization of external repository</title></head>
<body><h1>Releases synchronization</h1>
"""

def webform(options):
        form = "<form name='myform'>"
        for config in options.keys():
            for object in options[config]:
                form = "%s <INPUT TYPE=CHECKBOX NAME=%s VALUE=%s>%s<BR>" % (form, object, config, object)
        print form
        print '<input type=submit value="Start sync">'
        print '</form>'

def process():
    inputs = cgi.FieldStorage()
    fill = {}
    for key in inputs:
        fill[key] = inputs[key].value
    if fill not in [None, {}]:
        return fill
    else:
        return None

print PAGE_START
print 
print BODY
options = get_options()
choices = process()
if not choices:
    webform(options)
    print """</body></html>"""
else:
    print """
    <div id=div1>
        Sync will start asap, it should take around 30 minutes per option.
    </div>
    """
    for key in choices:
        if key not in ["", None] or choices[key] not in ["", None]:
            data = "config=%s\nobject=%s\n" % (os.path.join(cfg_path, choices[key]), key)
            t = time.localtime()
            t = time.strftime('%s', t)
            fp = open('/nokia/fnsynchro/sync_%s_%s' % (key, t),'w')
            fp.write(data)
            fp.write("notify=%s" % os.environ.get('REMOTE_USER'))
            fp.close
